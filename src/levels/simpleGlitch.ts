import { LevelAnnotationFlag, LevelDefinition } from "../models";
import { angry, glitchy, onOutOfEntropy, onTagActive, serious, step, teach, tease } from "./terminalTalk";

enum Tags {
  NextToWall = "next to wall",
  AwayFromWall = "AwayFromWall",
  OtherSideOfWall = "OtherSideOfWall",
}

export const straightforwardGlitch: LevelDefinition = {
  layout: [
    "?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K",
    "?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K",
    "?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K",
    "?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K",
    "?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K",
    "?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K",
    "?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K",
    "?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K",
    "*#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#*#",
    "|# . . . . . . . . . . . . . . . a w~~ o o o o o . . . . . . . . . . . . . . .|#",
    "|# . . . . . . . . . . . . . . . a w~~ o o o o o . . . . . . . . . . . . . . .|#",
    "|# . . . . . . . . . . . . . . . a w~~ o o o o o . . . . . . . . . . . . . . .|#",
    "|# . . . . . . . . .SS . . . . . a w~~ o o o o o . . . . . . . .FF . . . . . .|#",
    "*#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#*#",
    "?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K",
    "?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?T?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K",
    "?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K",
    "?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K",
    "?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K",
    "?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K",
    "?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K",
    "?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K?K",
  ],
  annotations: [
    {
      symbol: ".", //make all air dead zone
      zoneMode: "dead",
    },
    {
      symbol: "S", //make start square dead zone too
      zoneMode: "dead",
      flags: [LevelAnnotationFlag.spawn_player],
      customTags: [],
    },
    {
      symbol: "w",
      zoneMode: "dead",
      customTags: [Tags.NextToWall],
    },
    {
      symbol: "a",
      zoneMode: "dead",
      customTags: [Tags.AwayFromWall],
    },
    {
      symbol: "o",
      zoneMode: "dead",
      customTags: [Tags.OtherSideOfWall],
    },
    {
      symbol: "T",
      flags: [LevelAnnotationFlag.terminal],
      terminal: {
        trackTags: [Tags.AwayFromWall, Tags.NextToWall, Tags.OtherSideOfWall],
        onSpawn: [tease("You can't get me!")],
        conversations: [
          {
            name: "banging head against wall",
            steps: [
              step(onTagActive(Tags.NextToWall), tease("I told you.")),
              step(onTagActive(Tags.AwayFromWall), tease("Just give up.")),
              step(onTagActive(Tags.NextToWall), tease("You're stuck.")),
              step(onTagActive(Tags.AwayFromWall), teach("Shift gears.")),
              step(onTagActive(Tags.NextToWall), glitchy("(Left shift)")),
            ],
          },
          { name: "made it", steps: [step(onTagActive(Tags.OtherSideOfWall), angry("Hooray. You made it. -_-'"))] },
          { name: "shutdown", steps: [step(onOutOfEntropy, tease("Too much to handle?"))] },
        ],
      },
    },
  ],
};
